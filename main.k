; Generated by Veneer




Package Virtual-Analog {

Brief() { 
;; Bandlimited oscillators and nonlinear filters.
 nil
}


Dual-Saw(freq width waveform) {
;; Synthesizes two phase-offset, band-limited sawtooth waves from a shared phasor with 'freq'uency. The 'width' determines the phase offset relative to the waveform period. 'waveform' is the gain coefficient for the offset sawtooth; use 1 for dual saw and -1 for variable width pulse.
(ny0c95fs5kvyc2z-0) = (nrclehe8v73xu2fe-1 + n5a2g4mefw9grck4-0)
(n6hckv72d7518pb-0) = Poly-BLEP(n4d37na6pkdfv6rd-0 ntp7d2o7fq8xs6fe-0)
(nj56jgd6wqnjs5z9-0) = 0
(n5a2g4mefw9grck4-0) = phasor(ntp7d2o7fq8xs6fe-0)
(nkif86s3f6v203vv-0) = (n3x3lc37gk4ztydv-0 + ngas72blv8g40vr-0)
(n3x3lc37gk4ztydv-0) = (n6hckv72d7518pb-0 * nrclehe8v73xu2fe-2)
(ntp7d2o7fq8xs6fe-0) = (nrclehe8v73xu2fe-0 * nilwf1ougu3jz56e-0)
(nuoohopd8it403h2-0) = Gen:Signal(nj56jgd6wqnjs5z9-0)
(nilwf1ougu3jz56e-0) = Interval-of(nuoohopd8it403h2-0)
(n4d37na6pkdfv6rd-0) = Fraction(ny0c95fs5kvyc2z-0)
(naxhdgwv7vgqmh2t-0) = (nkif86s3f6v203vv-0 * #0.5)
(nrclehe8v73xu2fe-0 nrclehe8v73xu2fe-1 nrclehe8v73xu2fe-2) = arg
(ngas72blv8g40vr-0) = Poly-BLEP(n5a2g4mefw9grck4-0 ntp7d2o7fq8xs6fe-0)
naxhdgwv7vgqmh2t-0
}

Moog-LPF(sig cutoff resonance) {
(n1r968qv2ggq9rkx-0) = Interval-of(nerbxwcj26xlolq6-0)
(nk2kwzz5q4bh4bgs-0) = (sig) => ( lpf6(sig nbu8r276nwyk6z84-0 na4cbjkbqobmlncz-0) ) 
(nhu84w1g03wa6jw-0) = (n4v5uga9jw3ga194-0 * n27tprolhji5jd69-0 * nhx1hptparqe2z56-0)
(n4v5uga9jw3ga194-0) = (nlya3fy55bb294sj-1 * naoywrtwzrb4bn2b-0 * n1r968qv2ggq9rkx-0)
(n2v7x8n4ug9ridmh-0) = (naxh9k61kzy7x0tr-0 * n6abv5jw7waf831v-0)
(nw4mhv29rbyt0hm-0) = (nlya3fy55bb294sj-0 - n2v7x8n4ug9ridmh-0)
(n5hs1ijqc97ru3g9-0) = #-1
(n6abv5jw7waf831v-0) = (nlya3fy55bb294sj-2 * ((#1 + ((#0.5 * n27tprolhji5jd69-0) * (((#1 - n27tprolhji5jd69-0) + ((#5.6 * n27tprolhji5jd69-0) * n27tprolhji5jd69-0)))))))
(nerbxwcj26xlolq6-0) = Gen:Signal(nfx39txpejhurs0u-0)
(n6huj40f1z1vvdjy-0) = Saturation(nbxp197t3v0gpoy9-0)
(niqvgfrkhf3axite-0) = Saturation(nw4mhv29rbyt0hm-0)
(n27tprolhji5jd69-0) = (#1 - n4v5uga9jw3ga194-0)
(na4cbjkbqobmlncz-0) = (nbu8r276nwyk6z84-0 + nbu8r276nwyk6z84-0 + n5hs1ijqc97ru3g9-0)
(naoywrtwzrb4bn2b-0) = #2
(naxh9k61kzy7x0tr-0) = z-1(nbxp197t3v0gpoy9-0)
(nbxp197t3v0gpoy9-0) = Algorithm:Iterate(#4 nk2kwzz5q4bh4bgs-0 niqvgfrkhf3axite-0)
(nbu8r276nwyk6z84-0) = (n4v5uga9jw3ga194-0 + nhu84w1g03wa6jw-0)
(nlya3fy55bb294sj-0 nlya3fy55bb294sj-1 nlya3fy55bb294sj-2) = arg
(nfx39txpejhurs0u-0) = 0
(nhx1hptparqe2z56-0) = #0.8
n6huj40f1z1vvdjy-0
}

Poly-BLEP(phase rate) {
;; Bandlimited Sawtooth oscillator based on a 2nd degree polynomial bandlimited step.
(n2ixhbn599k56mn7-0) = (ny5wywjmrvvcf8ga-0 / no3u0kjdgxlqx2ue-1)
(n5wscwn905xh99ki-0) = (na4rlm23qxqfgng6-0 + n67gzklu5eeaa5w-0 + n67gzklu5eeaa5w-0)
(ndhc5rhldd3je1t-0) = sign(ny5wywjmrvvcf8ga-0)
(nl450041zb4ergf6-0) = 1
(na4rlm23qxqfgng6-0) = (ndhc5rhldd3je1t-0 * nyanol2vfruwmpwm-0)
(n34f4st3vf5vqdp1-0) = (n67gzklu5eeaa5w-0 * n67gzklu5eeaa5w-0)
(ntt4wmmar0ien1w6-0) = (nuk7qfxharohwf1l-0 - nl450041zb4ergf6-0 - n5wscwn905xh99ki-0)
(n67gzklu5eeaa5w-0) = clamp(n2ixhbn599k56mn7-0 -1 1)
(nyanol2vfruwmpwm-0) = (-1 - n34f4st3vf5vqdp1-0)
(nuk7qfxharohwf1l-0) = (neljp3hu7j4528ht-0 * 2)
(ny5wywjmrvvcf8ga-0) = (no3u0kjdgxlqx2ue-0 - 0.5)
(neljp3hu7j4528ht-0) = Fraction(ny5wywjmrvvcf8ga-0)
(no3u0kjdgxlqx2ue-0 no3u0kjdgxlqx2ue-1) = arg
ntt4wmmar0ien1w6-0
}

Saturation(sig) {
;; Soft-saturates 'sig'nal to the range of [-1,1]
(najjukyd3xch3og6-0) = (nb2brlkpj8ng3343-0 * n1tu9qyo8rah2ohf-0 * n1tu9qyo8rah2ohf-0)
(nwq8ape7is7yx21n-0) = (najjukyd3xch3og6-0 / nxyfz3uoimh5o3gv-0)
(nkdk6o4d7wk0mrlw-0) = arg
(nb2brlkpj8ng3343-0) = (n9z13nlg0bjvtqie-0 + #6)
(nxyfz3uoimh5o3gv-0) = (najjukyd3xch3og6-0 + #12)
(nhzp7hs97za4q5a1-0) = Math:Copy-Sign(nwq8ape7is7yx21n-0 nkdk6o4d7wk0mrlw-0)
(n9z13nlg0bjvtqie-0) = (n1ddu675f0ov2mgm-0 * n1tu9qyo8rah2ohf-0)
(n1tu9qyo8rah2ohf-0) = Abs(nkdk6o4d7wk0mrlw-0)
(n1ddu675f0ov2mgm-0) = (n1tu9qyo8rah2ohf-0 + #3)
nhzp7hs97za4q5a1-0
}

phasor(inc) {
(n7vb6fqvvs9cv7lw-0) = z-1(nxkcnemcw9cl3wd7-0)
(na4p9ysyp1p3iir-0) = nsxdaza9jozk6emu-0
(njatak14u3x1t56r-0) = arg
(npziw4g5gb6lcalz-0) = Gen:Signal(njatak14u3x1t56r-0)
(nsxdaza9jozk6emu-0) = Fraction(n7vb6fqvvs9cv7lw-0)
(nxkcnemcw9cl3wd7-0) = (npziw4g5gb6lcalz-0 + nsxdaza9jozk6emu-0)
na4p9ysyp1p3iir-0
}

sign() {
(n8eb5umbmd1b4b20-0) = arg
(nbyzrvnw8k9oz3un-0) = Ternary-Select(nhsoqrykco9o77ln-0 nha3zqc0n8s6gklr-0 necabc5fxm1wu4yl-0)
(necabc5fxm1wu4yl-0) = 1
(nha3zqc0n8s6gklr-0) = -1
(nhsoqrykco9o77ln-0) = (n8eb5umbmd1b4b20-0 < #0)
nbyzrvnw8k9oz3un-0
}

clamp(sig min max) {
(n6sz5yn9dxjr94zj-0) = Min(ncsgkzy2vqtji1fl-0 njkb3fzfo05b614q-2)
(ncsgkzy2vqtji1fl-0) = Max(njkb3fzfo05b614q-0 njkb3fzfo05b614q-1)
(njkb3fzfo05b614q-0 njkb3fzfo05b614q-1 njkb3fzfo05b614q-2) = arg
n6sz5yn9dxjr94zj-0
}

lpf6(sig p f) {
(nzj277e8hvupkiu2-0) = (n7iv2bprm6qo8953-2 * ngrc4zy4mc53gsmz-0)
(ngrc4zy4mc53gsmz-0) = z-1(no2x33yaur7kk0e9-0)
(no2x33yaur7kk0e9-0) = (ncnzz0t1ja3gsngv-0 - nzj277e8hvupkiu2-0)
(n7iv2bprm6qo8953-0 n7iv2bprm6qo8953-1 n7iv2bprm6qo8953-2) = arg
(ncnzz0t1ja3gsngv-0) = (n7iv2bprm6qo8953-1 * nw70hc814kxs956-0)
(nw70hc814kxs956-0) = (nu2lfwq28fd20ty0-0 + n7iv2bprm6qo8953-0)
(ne34h556bsohm27i-0) = no2x33yaur7kk0e9-0
(nu2lfwq28fd20ty0-0) = z-1(n7iv2bprm6qo8953-0)
ne34h556bsohm27i-0
}



}
