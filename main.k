; Generated by Veneer




Package Virtual-Analog {

Brief() { 
;; Bandlimited oscillators and nonlinear filters.
 nil
}


BLEP-Osc(freq width waveform) {
;; Synthesizes two phase-offset, band-limited sawtooth waves from a shared phasor with 'freq'uency. The 'width' determines the phase offset relative to the waveform period. 'waveform' is the gain coefficient for the offset sawtooth; use 1 for dual saw and -1 for variable width pulse. Polynomial band-limited step is used for alias supression. 
(nrclehe8v73xu2fe-0 nrclehe8v73xu2fe-1 nrclehe8v73xu2fe-2) = arg
(nu8q4rufog1bgjw7-0) = (phase rate) => ( Poly-BLEP(phase rate) ) 
(nzxb7k0beezz7hk7-0) = Dual-Saw(nu8q4rufog1bgjw7-0 nrclehe8v73xu2fe-0 nrclehe8v73xu2fe-1 nrclehe8v73xu2fe-2)
nzxb7k0beezz7hk7-0
}

BLIT-Osc(freq width waveform) {
(n2m41jl4cfhng2n3-0) = 10
(nb9v90dbo2z4d9t1-0) = (1 / nauaz24yx863c33v-0)
(npp0mh5x82swj59r-0) = (n04a21t3qsecf8bd-0 / nkp2zr9vgfczy6h7-0)
(n2qpfev0wpf5uwfq-0) = (nkp2zr9vgfczy6h7-0 * n72pumrapu5rz2ua-0)
(nu8z6vb0ahicka5-0) = (phase rate) => ( DSF(phase rate n1mss3tboknlhovv-0 nauaz24yx863c33v-0 n99e16vcfs145s1d-0) ) 
(n99e16vcfs145s1d-0) = #0.25
(n1mss3tboknlhovv-0) = Approx:Fast:Pow(ny7e4vr3e2gzz2oq-0 nb9v90dbo2z4d9t1-0)
(nauaz24yx863c33v-0) = Floor(npp0mh5x82swj59r-0)
(n24hy1r6777ecq0f-0) = Gen:Rate()
(ndqyyzai8rg2r48z-0) = (1 - n2qpfev0wpf5uwfq-0)
(ntbur1zsci999meq-0 ntbur1zsci999meq-1 ntbur1zsci999meq-2) = arg
(n04a21t3qsecf8bd-0) = (nao171vjon4ab7hc-0 * 0.5)
(nvokj1b4s4rc58a0-0) = Dual-Saw(nu8z6vb0ahicka5-0 nkp2zr9vgfczy6h7-0 ntbur1zsci999meq-1 ntbur1zsci999meq-2)
(nmiqxw8ly52vmb60-0) = Filter:Integrate(nvokj1b4s4rc58a0-0 ndqyyzai8rg2r48z-0)
(nkzfu7f3254ah6wx-0) = (nmiqxw8ly52vmb60-0 * n2qpfev0wpf5uwfq-0 * n8k8m9bc4fyog13u-0 * nu4ifd7k5z51pn5-0)
(nao171vjon4ab7hc-0) = Gen:Rate()
(n72pumrapu5rz2ua-0) = (1 / n24hy1r6777ecq0f-0)
(nu4ifd7k5z51pn5-0) = 2
(ny7e4vr3e2gzz2oq-0) = 0.5
(n8k8m9bc4fyog13u-0) = Math:Pi
(nkp2zr9vgfczy6h7-0) = Max(ntbur1zsci999meq-0 n2m41jl4cfhng2n3-0)
nkzfu7f3254ah6wx-0
}

DPW-Osc(freq width waveform) {
(n7o2zd1d5e8gtc1n-0) = Math:Exp(n66m3mh93axsliit-0)
(nt5sr98z187vy4ky-0) = (n2ge8gpmt1iag2ld-0 * Math:Pi)
(n2ge8gpmt1iag2ld-0) = (n6wko4dcgu1734xf-0 * 2)
(nvti4hcfxnrsimio-0 nvti4hcfxnrsimio-1 nvti4hcfxnrsimio-2) = arg
(nv378kqoubfihlbf-0) = Math:Pi
(n66m3mh93axsliit-0) = (nt5sr98z187vy4ky-0 * I)
(nc2nciu81r9p7c36-0) = (nz3zyz52h0qkcdxn-0 * ncp1hgu9y35dw6qw-0)
(n6rhwj5c58taic5y-0) = (n7o2zd1d5e8gtc1n-0 - 1)
(n6wko4dcgu1734xf-0) = (nvti4hcfxnrsimio-0 / nae50aj7fpgyu2m5-0)
(nae50aj7fpgyu2m5-0) = Gen:Rate()
(nywbd4z7gfhvfydk-0) = (phase rate) => ( DPW(phase rate) ) 
(ncp1hgu9y35dw6qw-0) = (nv378kqoubfihlbf-0 / nsu0zg8t4o4z93g6-0)
(nsu0zg8t4o4z93g6-0) = Abs(n6rhwj5c58taic5y-0)
(nz3zyz52h0qkcdxn-0) = Dual-Saw(nywbd4z7gfhvfydk-0 nvti4hcfxnrsimio-0 nvti4hcfxnrsimio-1 nvti4hcfxnrsimio-2)
nc2nciu81r9p7c36-0
}

Dual-Saw(engine freq width shape) {
(ngwiza4tcnjx43th-0) = (n0v993l9lu93zrb4-1 * n39m4vfjjo3ml1nr-0)
(nlgii8aqy7d0e8lg-0) = phasor(ngwiza4tcnjx43th-0)
(npu8aoyeh0qhw9ca-0) = (n4vsbunvcp129gj-0 * #0.5)
(n4vsbunvcp129gj-0) = (n9z617c34ij2j3t3-0 + nyzem873iw6uh697-0)
(ndafe8dourjlpn4v-0) = 0
(n2q8g1xuctho4mzp-0) = Gen:Signal(ndafe8dourjlpn4v-0)
(n9z617c34ij2j3t3-0) = (n0v993l9lu93zrb4-3 * njvgvk4bue2vi67d-0)
(njvgvk4bue2vi67d-0) = Eval(n0v993l9lu93zrb4-0 nttvfwceioxw4ekz-0 ngwiza4tcnjx43th-0 )
(n39m4vfjjo3ml1nr-0) = Interval-of(n2q8g1xuctho4mzp-0)
(n0v993l9lu93zrb4-0 n0v993l9lu93zrb4-1 n0v993l9lu93zrb4-2 n0v993l9lu93zrb4-3) = arg
(nyzem873iw6uh697-0) = Eval(n0v993l9lu93zrb4-0 nlgii8aqy7d0e8lg-0 ngwiza4tcnjx43th-0 )
(nttvfwceioxw4ekz-0) = Fraction(nquxe9rfl5fv5262-0)
(nquxe9rfl5fv5262-0) = (n0v993l9lu93zrb4-2 + nlgii8aqy7d0e8lg-0)
npu8aoyeh0qhw9ca-0
}

Poly-BLEP(phase rate) {
;; Bandlimited sawtooth waveshaping function based on a 2nd degree polynomial bandlimited step. Receives `phase` as a number between 0 and 1 and `rate` as the expected difference between consecutive phase values. `rate` is used to adjust BLEP smoothness.
(n2ixhbn599k56mn7-0) = (ny5wywjmrvvcf8ga-0 / no3u0kjdgxlqx2ue-1)
(npovwjjic9ws6yau-0) = 1
(n5wscwn905xh99ki-0) = (na4rlm23qxqfgng6-0 + n67gzklu5eeaa5w-0 + n67gzklu5eeaa5w-0)
(n1me2m516ebk1j9a-0) = (ntt4wmmar0ien1w6-0 * -2)
(nl450041zb4ergf6-0) = 1
(na4rlm23qxqfgng6-0) = (n56v4sd0ma4mb2uw-0 * nyanol2vfruwmpwm-0)
(n34f4st3vf5vqdp1-0) = (n67gzklu5eeaa5w-0 * n67gzklu5eeaa5w-0)
(ntt4wmmar0ien1w6-0) = (nuk7qfxharohwf1l-0 - nl450041zb4ergf6-0 - n5wscwn905xh99ki-0)
(n67gzklu5eeaa5w-0) = clamp(n2ixhbn599k56mn7-0 -1 1)
(nyanol2vfruwmpwm-0) = (-1 - n34f4st3vf5vqdp1-0)
(n56v4sd0ma4mb2uw-0) = Math:Copy-Sign(npovwjjic9ws6yau-0 ny5wywjmrvvcf8ga-0)
(nuk7qfxharohwf1l-0) = (neljp3hu7j4528ht-0 * 2)
(ny5wywjmrvvcf8ga-0) = (no3u0kjdgxlqx2ue-0 - 0.5)
(neljp3hu7j4528ht-0) = Fraction(ny5wywjmrvvcf8ga-0)
(no3u0kjdgxlqx2ue-0 no3u0kjdgxlqx2ue-1) = arg
n1me2m516ebk1j9a-0
}

DSF(phase rate rolloff harmonics phase-shift) {
;; Discrete Summation Formula ala Moorer  Computes equivalent to sum{k=0:N-1}(a^k * sin(beta + k*theta))  According to https://www.musicdsp.org/en/latest/Synthesis/140-dsf-super-set-of-blit.html
(nxgxn40wvxotlh7v-0) = (nzvw998z1c3hduq-0 - n4c4f1i3fyktg2vg-0 - n3htakwa5buiw643-0)
(nf6o6f52u0f847jc-0) = DSFSin(nm9979s6reekfesn-0)
(n8568rkj902ky5p4-0) = DSFSin(nadmzbv5hsb9xrae-0)
(n20da95ouaf4ndjt-0) = (n5p9kvhderiel6yt-0 + 1)
(n6vhn4od7oal144e-0) = noed7ho21y8c369d-4
(nm9979s6reekfesn-0) = (n6vhn4od7oal144e-0 + nxd3wic81232ovcg-0)
(n8e9vd9eer9c8ase-0) = (nee0icfwdmoac1vv-0 - 1)
(n4eq03fsgxye90dw-0) = 2
(nedza7zw08vzg17t-0) = (nm9979s6reekfesn-0 - noed7ho21y8c369d-0)
(nal1ahdob52pqt0n-0) = Math:Pow(nqmxpel91r5zx4jq-0 ndkv773rknsskkwe-0)
(nqmxpel91r5zx4jq-0) = nbcuot53viy86byc-0
(norl7ce13mfz44z3-0) = (nxgxn40wvxotlh7v-0 + nnbhgp991moih667-0)
(ndohe797fypmrsg6-0) = (nqmxpel91r5zx4jq-0 - nnaw81j62abjvz19-0)
(nadmzbv5hsb9xrae-0) = (noed7ho21y8c369d-0 + 0.25)
(nbcuot53viy86byc-0) = Min(ny1e5nu5yo2oklnj-0 noed7ho21y8c369d-2)
(ny1e5nu5yo2oklnj-0) = 0.99999
(n3htakwa5buiw643-0) = (nal1ahdob52pqt0n-0 * nf6o6f52u0f847jc-0)
(nnaw81j62abjvz19-0) = (n4eq03fsgxye90dw-0 * n8568rkj902ky5p4-0)
(ndkv773rknsskkwe-0) = (noed7ho21y8c369d-3 + 2)
(n5p9kvhderiel6yt-0) = (ndohe797fypmrsg6-0 * nqmxpel91r5zx4jq-0)
(nxd3wic81232ovcg-0) = (ndkv773rknsskkwe-0 * noed7ho21y8c369d-0)
(nnbhgp991moih667-0) = (nal1ahdob52pqt0n-0 * nqmxpel91r5zx4jq-0 * n1vj3809pl92qazs-0)
(n4c4f1i3fyktg2vg-0) = (nqmxpel91r5zx4jq-0 * nn4dz2x4wyduqtia-0)
(noed7ho21y8c369d-0 noed7ho21y8c369d-1 noed7ho21y8c369d-2 noed7ho21y8c369d-3 noed7ho21y8c369d-4) = arg
(nbw6rq65pa3nb3e7-0) = (n6vhn4od7oal144e-0 - noed7ho21y8c369d-0)
(n1vj3809pl92qazs-0) = DSFSin(nedza7zw08vzg17t-0)
(nn4dz2x4wyduqtia-0) = DSFSin(nbw6rq65pa3nb3e7-0)
(nzvw998z1c3hduq-0) = Math:Sin(naysdq0tzu1qy6hu-0)
(nee0icfwdmoac1vv-0) = (norl7ce13mfz44z3-0 / n20da95ouaf4ndjt-0)
(naysdq0tzu1qy6hu-0) = ((n6vhn4od7oal144e-0 * #2) * Math:Pi)
n8e9vd9eer9c8ase-0
}

DPW(phase rate) {
(n7kuvyka2jw66965-0) = (nyw9am531g1jr2v6-0 - 1)
(nc8j4lhgzrd0325c-0) = (ncdy6v222lihd82s-0 - ncjh0hfdbgb2au8v-0)
(ncdy6v222lihd82s-0) = z-1(ncjh0hfdbgb2au8v-0)
(ncjh0hfdbgb2au8v-0) = (n7kuvyka2jw66965-0 * n7kuvyka2jw66965-0)
(nivylx8r77azge4x-0 nivylx8r77azge4x-1) = arg
(nyw9am531g1jr2v6-0) = (nivylx8r77azge4x-0 * 2)
nc8j4lhgzrd0325c-0
}

DSFSin(phase) {
(n4pm6wgg45sd8991-0) = arg
(n83aydacojcozbt9-0) = Approx:Cosine-Shape(nd12h2dslo1dpeym-0 njzutu8aulc3ah9o-0)
(nd12h2dslo1dpeym-0) = (ngtwb3rb75brxj59-0 - 0.25)
(ngtwb3rb75brxj59-0) = Fraction(n4pm6wgg45sd8991-0)
(njzutu8aulc3ah9o-0) = #6
n83aydacojcozbt9-0
}

phasor(inc) {
(n7vb6fqvvs9cv7lw-0) = z-1(nxkcnemcw9cl3wd7-0)
(na4p9ysyp1p3iir-0) = nsxdaza9jozk6emu-0
(njatak14u3x1t56r-0) = arg
(npziw4g5gb6lcalz-0) = Gen:Signal(njatak14u3x1t56r-0)
(nsxdaza9jozk6emu-0) = Fraction(n7vb6fqvvs9cv7lw-0)
(nxkcnemcw9cl3wd7-0) = (npziw4g5gb6lcalz-0 + nsxdaza9jozk6emu-0)
na4p9ysyp1p3iir-0
}

clamp(sig min max) {
(n6sz5yn9dxjr94zj-0) = Min(ncsgkzy2vqtji1fl-0 njkb3fzfo05b614q-2)
(ncsgkzy2vqtji1fl-0) = Max(njkb3fzfo05b614q-0 njkb3fzfo05b614q-1)
(njkb3fzfo05b614q-0 njkb3fzfo05b614q-1 njkb3fzfo05b614q-2) = arg
n6sz5yn9dxjr94zj-0
}

Moog-VCF(sig fc res) {
(nge494w6gmv9g6p6-0) = (nihzgnrksmn9n58o-0 * 0.5)
(n3z9e4epjsczb6t3-0) = (n4dugdl9uxhht5yr-0 * nvzx41o6vr09sfij-0 * nvzx41o6vr09sfij-0 * nczr7kmaim9ng4je-0)
(n1j3h5h3u3zjmqav-0) = (1 - nc8emdjq0gjiuxvm-0)
(ncfnxez1qsbcq2nx-0) = (n6379kaavqjgwf8d-0 * nd0h76xo76hy51ic-2 * n22hzkhc0bzadx3-0)
(ne3tok7ar7m6mdbn-0) = n22hzkhc0bzadx3-0
(n96b4701cv6v31i1-0) = Algorithm:Iterate(nzku1eg6n6bhxnpl-0 ndvg50k3y1hlye9m-0 n3z9e4epjsczb6t3-0)
(nxig7y46l6robr6t-0) = Approx:Tanh(n96b4701cv6v31i1-0)
(n22hzkhc0bzadx3-0) = z-1(nxig7y46l6robr6t-0)
(n1fm7935bivqj261-0) = 0.15
(nczr7kmaim9ng4je-0) = 0.35013
(n6379kaavqjgwf8d-0) = (1 - nwzz24h606nju96f-0)
(nc8emdjq0gjiuxvm-0) = (nd0h76xo76hy51ic-1 / nge494w6gmv9g6p6-0)
(nd0h76xo76hy51ic-0 nd0h76xo76hy51ic-1 nd0h76xo76hy51ic-2) = arg
(nzku1eg6n6bhxnpl-0) = #4
(nvzx41o6vr09sfij-0) = (n7xidtp7r27qucpy-0 * n7xidtp7r27qucpy-0)
(nihzgnrksmn9n58o-0) = Gen:Rate()
(n4dugdl9uxhht5yr-0) = (nd0h76xo76hy51ic-0 - ncfnxez1qsbcq2nx-0)
(n7xidtp7r27qucpy-0) = (nc8emdjq0gjiuxvm-0 * 1.16)
(nwzz24h606nju96f-0) = (nvzx41o6vr09sfij-0 * n1fm7935bivqj261-0)
(ndvg50k3y1hlye9m-0) = (sig) => ( VCF-Stage(sig n1j3h5h3u3zjmqav-0) ) 
ne3tok7ar7m6mdbn-0
}

VCF-Stage(sig coef) {
(n2mxkycckz812q0e-0) = (nupueiflnl99q917-0 + nrpl8vqmtwvjk821-0 + nd735airmq1gonwb-0)
(nav3g8j9p539w4p2-0) = z-1(n2mxkycckz812q0e-0)
(nd735airmq1gonwb-0) = (nupueiflnl99q917-1 * nav3g8j9p539w4p2-0)
(ndgz6t6fcq2rdhz-0) = n2mxkycckz812q0e-0
(nl7tctekhwa9o99g-0) = z-1(nupueiflnl99q917-0)
(nrpl8vqmtwvjk821-0) = (nl7tctekhwa9o99g-0 * 0.3)
(nupueiflnl99q917-0 nupueiflnl99q917-1) = arg
ndgz6t6fcq2rdhz-0
}

}
