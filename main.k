; Generated by Veneer




Package Virtual-Analog {

Brief() { 
;; Bandlimited oscillators and nonlinear filters.
 nil
}


Dual-Saw(freq width waveform) {
;; Synthesizes two phase-offset, band-limited sawtooth waves from a shared phasor with 'freq'uency. The 'width' determines the phase offset relative to the waveform period. 'waveform' is the gain coefficient for the offset sawtooth; use 1 for dual saw and -1 for variable width pulse.
(ny0c95fs5kvyc2z-0) = (nrclehe8v73xu2fe-1 + n5a2g4mefw9grck4-0)
(n6hckv72d7518pb-0) = Poly-BLEP(n4d37na6pkdfv6rd-0 ntp7d2o7fq8xs6fe-0)
(nj56jgd6wqnjs5z9-0) = 0
(n5a2g4mefw9grck4-0) = phasor(ntp7d2o7fq8xs6fe-0)
(nkif86s3f6v203vv-0) = (n3x3lc37gk4ztydv-0 + ngas72blv8g40vr-0)
(n3x3lc37gk4ztydv-0) = (n6hckv72d7518pb-0 * nrclehe8v73xu2fe-2)
(ntp7d2o7fq8xs6fe-0) = (nrclehe8v73xu2fe-0 * nilwf1ougu3jz56e-0)
(nuoohopd8it403h2-0) = Gen:Signal(nj56jgd6wqnjs5z9-0)
(nilwf1ougu3jz56e-0) = Interval-of(nuoohopd8it403h2-0)
(n4d37na6pkdfv6rd-0) = Fraction(ny0c95fs5kvyc2z-0)
(naxhdgwv7vgqmh2t-0) = (nkif86s3f6v203vv-0 * #0.5)
(nrclehe8v73xu2fe-0 nrclehe8v73xu2fe-1 nrclehe8v73xu2fe-2) = arg
(ngas72blv8g40vr-0) = Poly-BLEP(n5a2g4mefw9grck4-0 ntp7d2o7fq8xs6fe-0)
naxhdgwv7vgqmh2t-0
}

Ladder-LPF(sig cutoff resonance) {
(n1r968qv2ggq9rkx-0) = Interval-of(nerbxwcj26xlolq6-0)
(n0ympmd5m3attvvs-0) = #0.3
(n4v5uga9jw3ga194-0) = (nlya3fy55bb294sj-1 * naoywrtwzrb4bn2b-0 * n1r968qv2ggq9rkx-0)
(nkcu4uxaa36k0gpa-0) = n6qz7uq109g25b9u-0
(narxms41dilkeuka-0) = Saturation(ngff2jpd4js9f0ox-0)
(n6qz7uq109g25b9u-0) = Algorithm:Iterate(#4 nswd5m252yef4x5f-0 need6bt36uees78v-0)
(n689c5qk87hzvnz-0) = z-1(n6qz7uq109g25b9u-0)
(nzj5r0q7h2c9n2cf-0) = #0.35013
(nerbxwcj26xlolq6-0) = Gen:Signal(nfx39txpejhurs0u-0)
(nswd5m252yef4x5f-0) = (sig) => ( lpf6(sig n0ympmd5m3attvvs-0 n2p68bz600as8dpl-0) ) 
(nrfmqtviny4897dc-0) = (nzjdgjgzajoysytd-0 * n689c5qk87hzvnz-0)
(n1nad3b41lb2q3fp-0) = (n4v5uga9jw3ga194-0 * #1.16)
(ngff2jpd4js9f0ox-0) = (nlya3fy55bb294sj-0 - nrfmqtviny4897dc-0)
(naoywrtwzrb4bn2b-0) = #2
(nzjdgjgzajoysytd-0) = (nlya3fy55bb294sj-2 * ((#1 - ((#0.15 * n1nad3b41lb2q3fp-0) * n1nad3b41lb2q3fp-0))))
(nxn68henj8n7faqx-0) = (nzj5r0q7h2c9n2cf-0 * n1nad3b41lb2q3fp-0 * n1nad3b41lb2q3fp-0 * n1nad3b41lb2q3fp-0 * n1nad3b41lb2q3fp-0)
(need6bt36uees78v-0) = (nxn68henj8n7faqx-0 * narxms41dilkeuka-0)
(nlya3fy55bb294sj-0 nlya3fy55bb294sj-1 nlya3fy55bb294sj-2) = arg
(n2p68bz600as8dpl-0) = (n1nad3b41lb2q3fp-0 - #1)
(nfx39txpejhurs0u-0) = 1
nkcu4uxaa36k0gpa-0
}

Poly-BLEP(phase rate) {
;; Bandlimited Sawtooth oscillator based on a 2nd degree polynomial bandlimited step.
(n2ixhbn599k56mn7-0) = (ny5wywjmrvvcf8ga-0 / no3u0kjdgxlqx2ue-1)
(n5wscwn905xh99ki-0) = (na4rlm23qxqfgng6-0 + n67gzklu5eeaa5w-0 + n67gzklu5eeaa5w-0)
(ndhc5rhldd3je1t-0) = sign(ny5wywjmrvvcf8ga-0)
(nl450041zb4ergf6-0) = 1
(na4rlm23qxqfgng6-0) = (ndhc5rhldd3je1t-0 * nyanol2vfruwmpwm-0)
(n34f4st3vf5vqdp1-0) = (n67gzklu5eeaa5w-0 * n67gzklu5eeaa5w-0)
(ntt4wmmar0ien1w6-0) = (nuk7qfxharohwf1l-0 - nl450041zb4ergf6-0 - n5wscwn905xh99ki-0)
(n67gzklu5eeaa5w-0) = clamp(n2ixhbn599k56mn7-0 -1 1)
(nyanol2vfruwmpwm-0) = (-1 - n34f4st3vf5vqdp1-0)
(nuk7qfxharohwf1l-0) = (neljp3hu7j4528ht-0 * 2)
(ny5wywjmrvvcf8ga-0) = (no3u0kjdgxlqx2ue-0 - 0.5)
(neljp3hu7j4528ht-0) = Fraction(ny5wywjmrvvcf8ga-0)
(no3u0kjdgxlqx2ue-0 no3u0kjdgxlqx2ue-1) = arg
ntt4wmmar0ien1w6-0
}

Saturation(sig) {
;; Soft-saturates 'sig'nal to the range of [-1,1]
(no8e540en6dj4a56-0) = (neodombotu8tbc6s-0 + #27)
(neodombotu8tbc6s-0) = (ndd8gqox79sj8bqf-0 * ndd8gqox79sj8bqf-0)
(nkdk6o4d7wk0mrlw-0) = arg
(n22q5krcen0zhm4w-0) = (nspf5haqeked7cte-0 + #27)
(ndd8gqox79sj8bqf-0) = clamp(nkdk6o4d7wk0mrlw-0 #-3 #3)
(naee7ujoo8cglo8t-0) = (no8e540en6dj4a56-0 * ndd8gqox79sj8bqf-0)
(nspf5haqeked7cte-0) = (neodombotu8tbc6s-0 * #9)
(nueo6manrd8p077l-0) = (naee7ujoo8cglo8t-0 / n22q5krcen0zhm4w-0)
nueo6manrd8p077l-0
}

phasor(inc) {
(n7vb6fqvvs9cv7lw-0) = z-1(nxkcnemcw9cl3wd7-0)
(na4p9ysyp1p3iir-0) = nsxdaza9jozk6emu-0
(njatak14u3x1t56r-0) = arg
(npziw4g5gb6lcalz-0) = Gen:Signal(njatak14u3x1t56r-0)
(nsxdaza9jozk6emu-0) = Fraction(n7vb6fqvvs9cv7lw-0)
(nxkcnemcw9cl3wd7-0) = (npziw4g5gb6lcalz-0 + nsxdaza9jozk6emu-0)
na4p9ysyp1p3iir-0
}

sign() {
(n8eb5umbmd1b4b20-0) = arg
(nbyzrvnw8k9oz3un-0) = Ternary-Select(nhsoqrykco9o77ln-0 nha3zqc0n8s6gklr-0 necabc5fxm1wu4yl-0)
(necabc5fxm1wu4yl-0) = 1
(nha3zqc0n8s6gklr-0) = -1
(nhsoqrykco9o77ln-0) = (n8eb5umbmd1b4b20-0 < #0)
nbyzrvnw8k9oz3un-0
}

clamp(sig min max) {
(n6sz5yn9dxjr94zj-0) = Min(ncsgkzy2vqtji1fl-0 njkb3fzfo05b614q-2)
(ncsgkzy2vqtji1fl-0) = Max(njkb3fzfo05b614q-0 njkb3fzfo05b614q-1)
(njkb3fzfo05b614q-0 njkb3fzfo05b614q-1 njkb3fzfo05b614q-2) = arg
n6sz5yn9dxjr94zj-0
}

lpf6(sig z p) {
(n1ynqky8h54jki3b-0) = z-1(n7iv2bprm6qo8953-0)
(n7iv2bprm6qo8953-0 n7iv2bprm6qo8953-1 n7iv2bprm6qo8953-2) = arg
(n8ig2z8fmp9vjntp-0) = z-1(nc76hjiklaj3piou-0)
(nc76hjiklaj3piou-0) = (nmitlq6gsicfo2zh-0 - nd18p95a0v7opw65-0)
(nd18p95a0v7opw65-0) = (n8ig2z8fmp9vjntp-0 * n7iv2bprm6qo8953-2)
(nd6zv55qx55io9cy-0) = (n1ynqky8h54jki3b-0 * n7iv2bprm6qo8953-1)
(ndboaqpo1nbv1yp7-0) = nc76hjiklaj3piou-0
(nmitlq6gsicfo2zh-0) = (nd6zv55qx55io9cy-0 + n7iv2bprm6qo8953-0)
ndboaqpo1nbv1yp7-0
}



}
