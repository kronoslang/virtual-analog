; Generated by Veneer




Package Virtual-Analog {

Brief() { 
;; Bandlimited oscillators and nonlinear filters.
 nil
}


Dual-Saw(freq width waveform) {
;; Synthesizes two phase-offset, band-limited sawtooth waves from a shared phasor with 'freq'uency. The 'width' determines the phase offset relative to the waveform period. 'waveform' is the gain coefficient for the offset sawtooth; use 1 for dual saw and -1 for variable width pulse.
(ny0c95fs5kvyc2z-0) = (nrclehe8v73xu2fe-1 + n5a2g4mefw9grck4-0)
(n6hckv72d7518pb-0) = Poly-BLEP(n4d37na6pkdfv6rd-0 ntp7d2o7fq8xs6fe-0)
(nj56jgd6wqnjs5z9-0) = 0
(n5a2g4mefw9grck4-0) = phasor(ntp7d2o7fq8xs6fe-0)
(nkif86s3f6v203vv-0) = (n3x3lc37gk4ztydv-0 + ngas72blv8g40vr-0)
(n3x3lc37gk4ztydv-0) = (n6hckv72d7518pb-0 * nrclehe8v73xu2fe-2)
(ntp7d2o7fq8xs6fe-0) = (nrclehe8v73xu2fe-0 * nilwf1ougu3jz56e-0)
(nuoohopd8it403h2-0) = Gen:Signal(nj56jgd6wqnjs5z9-0)
(nilwf1ougu3jz56e-0) = Interval-of(nuoohopd8it403h2-0)
(n4d37na6pkdfv6rd-0) = Fraction(ny0c95fs5kvyc2z-0)
(naxhdgwv7vgqmh2t-0) = (nkif86s3f6v203vv-0 * #0.5)
(nrclehe8v73xu2fe-0 nrclehe8v73xu2fe-1 nrclehe8v73xu2fe-2) = arg
(ngas72blv8g40vr-0) = Poly-BLEP(n5a2g4mefw9grck4-0 ntp7d2o7fq8xs6fe-0)
naxhdgwv7vgqmh2t-0
}

Poly-BLEP(phase rate) {
;; Bandlimited sawtooth waveshaping function based on a 2nd degree polynomial bandlimited step. Receives `phase` as a number between 0 and 1 and `rate` as the expected difference between consecutive phase values. `rate` is used to adjust BLEP smoothness.
(n2ixhbn599k56mn7-0) = (ny5wywjmrvvcf8ga-0 / no3u0kjdgxlqx2ue-1)
(npovwjjic9ws6yau-0) = 1
(n5wscwn905xh99ki-0) = (na4rlm23qxqfgng6-0 + n67gzklu5eeaa5w-0 + n67gzklu5eeaa5w-0)
(nl450041zb4ergf6-0) = 1
(na4rlm23qxqfgng6-0) = (n56v4sd0ma4mb2uw-0 * nyanol2vfruwmpwm-0)
(n34f4st3vf5vqdp1-0) = (n67gzklu5eeaa5w-0 * n67gzklu5eeaa5w-0)
(ntt4wmmar0ien1w6-0) = (nuk7qfxharohwf1l-0 - nl450041zb4ergf6-0 - n5wscwn905xh99ki-0)
(n67gzklu5eeaa5w-0) = clamp(n2ixhbn599k56mn7-0 -1 1)
(nyanol2vfruwmpwm-0) = (-1 - n34f4st3vf5vqdp1-0)
(n56v4sd0ma4mb2uw-0) = Math:Copy-Sign(npovwjjic9ws6yau-0 ny5wywjmrvvcf8ga-0)
(nuk7qfxharohwf1l-0) = (neljp3hu7j4528ht-0 * 2)
(ny5wywjmrvvcf8ga-0) = (no3u0kjdgxlqx2ue-0 - 0.5)
(neljp3hu7j4528ht-0) = Fraction(ny5wywjmrvvcf8ga-0)
(no3u0kjdgxlqx2ue-0 no3u0kjdgxlqx2ue-1) = arg
ntt4wmmar0ien1w6-0
}

phasor(inc) {
(n7vb6fqvvs9cv7lw-0) = z-1(nxkcnemcw9cl3wd7-0)
(na4p9ysyp1p3iir-0) = nsxdaza9jozk6emu-0
(njatak14u3x1t56r-0) = arg
(npziw4g5gb6lcalz-0) = Gen:Signal(njatak14u3x1t56r-0)
(nsxdaza9jozk6emu-0) = Fraction(n7vb6fqvvs9cv7lw-0)
(nxkcnemcw9cl3wd7-0) = (npziw4g5gb6lcalz-0 + nsxdaza9jozk6emu-0)
na4p9ysyp1p3iir-0
}

clamp(sig min max) {
(n6sz5yn9dxjr94zj-0) = Min(ncsgkzy2vqtji1fl-0 njkb3fzfo05b614q-2)
(ncsgkzy2vqtji1fl-0) = Max(njkb3fzfo05b614q-0 njkb3fzfo05b614q-1)
(njkb3fzfo05b614q-0 njkb3fzfo05b614q-1 njkb3fzfo05b614q-2) = arg
n6sz5yn9dxjr94zj-0
}



DSF(freq rolloff harmonics phase-shift) {
;; Discrete Summation Formula ala Moorer  Computes equivalent to sum{k=0:N-1}(a^k * sin(beta + k*theta))  According to https://www.musicdsp.org/en/latest/Synthesis/140-dsf-super-set-of-blit.html
(nxgxn40wvxotlh7v-0) = (nlpbe1tpdc2hac8i-0 - n4c4f1i3fyktg2vg-0 - n3htakwa5buiw643-0)
(nf6o6f52u0f847jc-0) = DSFSin(nbo09ip7xz63x81k-0)
(n8568rkj902ky5p4-0) = DSFSin(nadmzbv5hsb9xrae-0)
(nb38p1foh3q9g240-0) = Gen:Rate()
(neqlncxvd7iewdio-0) = Min(noed7ho21y8c369d-2 nbsry7t6qcbgtqbj-0)
(nwgk69j83lt86hqn-0) = (nq5c6eu4yfqpp2yh-0 / noed7ho21y8c369d-0)
(n6vhn4od7oal144e-0) = noed7ho21y8c369d-3
(nbwqby4e3hawyib7-0) = ((1 + (nqmxpel91r5zx4jq-0 * ((nqmxpel91r5zx4jq-0 - (2 * n8568rkj902ky5p4-0))))))
(n8e9vd9eer9c8ase-0) = (nee0icfwdmoac1vv-0 - 1)
(nqmxpel91r5zx4jq-0) = noed7ho21y8c369d-1
(nzcyikmije3pxng9-0) = (n8e9vd9eer9c8ase-0 * nc2a1b92koauh5yz-0)
(norl7ce13mfz44z3-0) = (nxgxn40wvxotlh7v-0 + nnbhgp991moih667-0)
(nlpbe1tpdc2hac8i-0) = DSFSin(n6vhn4od7oal144e-0)
(nadmzbv5hsb9xrae-0) = (n5b1weybgbjwwmvy-0 + 0.25)
(n92r2g1lw7j4ky5-0) = Approx:Fast:Pow(nqmxpel91r5zx4jq-0 neqlncxvd7iewdio-0)
(n3htakwa5buiw643-0) = (n92r2g1lw7j4ky5-0 * nf6o6f52u0f847jc-0)
(nbsry7t6qcbgtqbj-0) = (nwgk69j83lt86hqn-0 + 1)
(nnbhgp991moih667-0) = (n92r2g1lw7j4ky5-0 * nqmxpel91r5zx4jq-0 * n1vj3809pl92qazs-0)
(n4c4f1i3fyktg2vg-0) = (nqmxpel91r5zx4jq-0 * nn4dz2x4wyduqtia-0)
(nc2a1b92koauh5yz-0) = (noed7ho21y8c369d-0 / nb38p1foh3q9g240-0)
(nvh0xoy6bc284bq4-0) = (n6vhn4od7oal144e-0 + (((neqlncxvd7iewdio-0 - 1)) * n5b1weybgbjwwmvy-0))
(noed7ho21y8c369d-0 noed7ho21y8c369d-1 noed7ho21y8c369d-2 noed7ho21y8c369d-3) = arg
(n5b1weybgbjwwmvy-0) = phasor(nc2a1b92koauh5yz-0)
(nbw6rq65pa3nb3e7-0) = (n6vhn4od7oal144e-0 - n5b1weybgbjwwmvy-0)
(n1vj3809pl92qazs-0) = DSFSin(nvh0xoy6bc284bq4-0)
(nbo09ip7xz63x81k-0) = (n6vhn4od7oal144e-0 + (neqlncxvd7iewdio-0 * n5b1weybgbjwwmvy-0))
(nq5c6eu4yfqpp2yh-0) = (nb38p1foh3q9g240-0 / 2)
(nn4dz2x4wyduqtia-0) = DSFSin(nbw6rq65pa3nb3e7-0)
(nee0icfwdmoac1vv-0) = (norl7ce13mfz44z3-0 / nbwqby4e3hawyib7-0)
nzcyikmije3pxng9-0
}

DSFSin(phase) {
(n83aydacojcozbt9-0) = Approx:Cosine-Shape(nd12h2dslo1dpeym-0 njzutu8aulc3ah9o-0)
(njzutu8aulc3ah9o-0) = #6
(n4pm6wgg45sd8991-0) = arg
(ngtwb3rb75brxj59-0) = Fraction(n4pm6wgg45sd8991-0)
(nd12h2dslo1dpeym-0) = (ngtwb3rb75brxj59-0 - 0.25)
n83aydacojcozbt9-0
}

}
